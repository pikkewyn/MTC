#define YY_BisonParser_h_included
#define YY_USE_CLASS

/*  A Bison++ parser, made from ./bison_parser.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */

#define YY_USE_CLASS

#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#line 2 "./bison_parser.y"

#include "headers/ph.hpp"

#include "headers/semantic_value_stack.hpp"

#include "headers/operators.hpp"
#include "headers/scanner.hpp"

using namespace Syntax;
#define YY_BisonParser_STYPE  Syntax::SemanticValueStack
#define YY_BisonParser_CONSTRUCTOR_PARAM 	std::istream* _in, std::ostream* _out
#define YY_BisonParser_CONSTRUCTOR_INIT 	: m_lexer( _in, _out )
#define YY_BisonParser_CONSTRUCTOR_CODE 	{}
#define YY_BisonParser_MEMBERS 		\
	public:			\
		virtual ~BisonParser(){} \
		boost::shared_ptr< Syntax::Program > getProgram(){ return m_program; } \
	protected:		\
		yyFlexLexer m_lexer; \
		boost::shared_ptr< Syntax::Program > m_program;
#define YY_BisonParser_LEX_BODY  { return m_lexer.yylex(); }
#define YY_BisonParser_ERROR_BODY  { std::cerr << "Syntax error" << std::endl; }
#define YY_BisonParser_DEBUG  1

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_BisonParser_BISON 1

#ifndef YY_BisonParser_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_BisonParser_COMPATIBILITY 1
 #else
  #define  YY_BisonParser_COMPATIBILITY 0
 #endif
#endif

#if YY_BisonParser_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_BisonParser_LTYPE
   #define YY_BisonParser_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_BisonParser_STYPE 
   #define YY_BisonParser_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_BisonParser_DEBUG
   #define  YY_BisonParser_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_BisonParser_USE_GOTO
  #define YY_BisonParser_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_BisonParser_USE_GOTO
 #define YY_BisonParser_USE_GOTO 0
#endif

#ifndef YY_BisonParser_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_BisonParser_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_BisonParser_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_BisonParser_DEBUG */
#endif


#ifndef YY_BisonParser_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_BisonParser_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_BisonParser_LSP_NEEDED
#ifndef YY_BisonParser_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_BisonParser_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_BisonParser_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_BisonParser_STYPE
#define YY_BisonParser_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_BisonParser_PARSE
#define YY_BisonParser_PARSE yyparse
#endif
#ifndef YY_BisonParser_LEX
#define YY_BisonParser_LEX yylex
#endif
#ifndef YY_BisonParser_LVAL
#define YY_BisonParser_LVAL yylval
#endif
#ifndef YY_BisonParser_LLOC
#define YY_BisonParser_LLOC yylloc
#endif
#ifndef YY_BisonParser_CHAR
#define YY_BisonParser_CHAR yychar
#endif
#ifndef YY_BisonParser_NERRS
#define YY_BisonParser_NERRS yynerrs
#endif
#ifndef YY_BisonParser_DEBUG_FLAG
#define YY_BisonParser_DEBUG_FLAG yydebug
#endif
#ifndef YY_BisonParser_ERROR
#define YY_BisonParser_ERROR yyerror
#endif

#ifndef YY_BisonParser_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_BisonParser_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_BisonParser_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_BisonParser_PARSE_PARAM
  #define YY_BisonParser_PARSE_PARAM void
 #endif
#endif

#if YY_BisonParser_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_BisonParser_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_BisonParser_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_BisonParser_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_BisonParser_PURE
#  ifndef YYPURE
#    define YYPURE YY_BisonParser_PURE
#  endif
#endif

#ifdef YY_BisonParser_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_BisonParser_DEBUG 
#  endif
#endif

#ifndef YY_BisonParser_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_BisonParser_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_BisonParser_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_BisonParser_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	NULL_UNIT	258
#define	NUMBER	259
#define	IDENTIFIER	260
#define	STRING	261
#define	ALL	262
#define	BASIC_TYPE	263
#define	BREAK	264
#define	CONTINUE	265
#define	DO	266
#define	IF	267
#define	FOR	268
#define	RETURN	269
#define	WHILE	270
#define	IFX	271
#define	ELSE	272
#define	EQ	273
#define	NEQ	274
#define	OR	275
#define	AND	276


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_BisonParser_CLASS
#define YY_BisonParser_CLASS BisonParser
#endif
#ifndef YY_BisonParser_INHERIT
#define YY_BisonParser_INHERIT
#endif
#ifndef YY_BisonParser_MEMBERS
#define YY_BisonParser_MEMBERS 
#endif
#ifndef YY_BisonParser_LEX_BODY
#define YY_BisonParser_LEX_BODY  
#endif
#ifndef YY_BisonParser_ERROR_BODY
#define YY_BisonParser_ERROR_BODY  
#endif
#ifndef YY_BisonParser_CONSTRUCTOR_PARAM
#define YY_BisonParser_CONSTRUCTOR_PARAM
#endif
#ifndef YY_BisonParser_CONSTRUCTOR_CODE
#define YY_BisonParser_CONSTRUCTOR_CODE
#endif
#ifndef YY_BisonParser_CONSTRUCTOR_INIT
#define YY_BisonParser_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_BisonParser_USE_CONST_TOKEN
#define YY_BisonParser_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_BisonParser_USE_CONST_TOKEN != 0
#ifndef YY_BisonParser_ENUM_TOKEN
#define YY_BisonParser_ENUM_TOKEN yy_BisonParser_enum_token
#endif
#endif

class YY_BisonParser_CLASS YY_BisonParser_INHERIT
{
public: 
#if YY_BisonParser_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int NULL_UNIT;
static const int NUMBER;
static const int IDENTIFIER;
static const int STRING;
static const int ALL;
static const int BASIC_TYPE;
static const int BREAK;
static const int CONTINUE;
static const int DO;
static const int IF;
static const int FOR;
static const int RETURN;
static const int WHILE;
static const int IFX;
static const int ELSE;
static const int EQ;
static const int NEQ;
static const int OR;
static const int AND;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_BisonParser_ENUM_TOKEN { YY_BisonParser_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,NULL_UNIT=258
	,NUMBER=259
	,IDENTIFIER=260
	,STRING=261
	,ALL=262
	,BASIC_TYPE=263
	,BREAK=264
	,CONTINUE=265
	,DO=266
	,IF=267
	,FOR=268
	,RETURN=269
	,WHILE=270
	,IFX=271
	,ELSE=272
	,EQ=273
	,NEQ=274
	,OR=275
	,AND=276


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_BisonParser_PARSE (YY_BisonParser_PARSE_PARAM);
 virtual void YY_BisonParser_ERROR(char *msg) YY_BisonParser_ERROR_BODY;
#ifdef YY_BisonParser_PURE
#ifdef YY_BisonParser_LSP_NEEDED
 virtual int  YY_BisonParser_LEX (YY_BisonParser_STYPE *YY_BisonParser_LVAL,YY_BisonParser_LTYPE *YY_BisonParser_LLOC) YY_BisonParser_LEX_BODY;
#else
 virtual int  YY_BisonParser_LEX (YY_BisonParser_STYPE *YY_BisonParser_LVAL) YY_BisonParser_LEX_BODY;
#endif
#else
 virtual int YY_BisonParser_LEX() YY_BisonParser_LEX_BODY;
 YY_BisonParser_STYPE YY_BisonParser_LVAL;
#ifdef YY_BisonParser_LSP_NEEDED
 YY_BisonParser_LTYPE YY_BisonParser_LLOC;
#endif
 int   YY_BisonParser_NERRS;
 int    YY_BisonParser_CHAR;
#endif
#if YY_BisonParser_DEBUG != 0
 int YY_BisonParser_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_BisonParser_CLASS(YY_BisonParser_CONSTRUCTOR_PARAM);
public:
 YY_BisonParser_MEMBERS 
};
/* other declare folow */
#if YY_BisonParser_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_BisonParser_CLASS::NULL_UNIT=258;
const int YY_BisonParser_CLASS::NUMBER=259;
const int YY_BisonParser_CLASS::IDENTIFIER=260;
const int YY_BisonParser_CLASS::STRING=261;
const int YY_BisonParser_CLASS::ALL=262;
const int YY_BisonParser_CLASS::BASIC_TYPE=263;
const int YY_BisonParser_CLASS::BREAK=264;
const int YY_BisonParser_CLASS::CONTINUE=265;
const int YY_BisonParser_CLASS::DO=266;
const int YY_BisonParser_CLASS::IF=267;
const int YY_BisonParser_CLASS::FOR=268;
const int YY_BisonParser_CLASS::RETURN=269;
const int YY_BisonParser_CLASS::WHILE=270;
const int YY_BisonParser_CLASS::IFX=271;
const int YY_BisonParser_CLASS::ELSE=272;
const int YY_BisonParser_CLASS::EQ=273;
const int YY_BisonParser_CLASS::NEQ=274;
const int YY_BisonParser_CLASS::OR=275;
const int YY_BisonParser_CLASS::AND=276;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_BisonParser_CLASS::token */
#endif
/*apres const  */
YY_BisonParser_CLASS::YY_BisonParser_CLASS(YY_BisonParser_CONSTRUCTOR_PARAM) YY_BisonParser_CONSTRUCTOR_INIT
{
#if YY_BisonParser_DEBUG != 0
YY_BisonParser_DEBUG_FLAG=0;
#endif
YY_BisonParser_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		147
#define	YYFLAG		-32768
#define	YYNTBASE	36

#define YYTRANSLATE(x) ((unsigned)(x) <= 276 ? yytranslate[x] : 65)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    35,     2,    29,
    30,    26,    24,    33,    25,     2,    27,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    34,    19,
    28,    18,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    31,     2,    32,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    20,    21,    22,    23
};

#if YY_BisonParser_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,     7,    14,    25,    29,    31,    32,    34,
    36,    38,    40,    42,    44,    46,    48,    51,    54,    57,
    62,    65,    67,    71,    74,    76,    82,    90,    96,   106,
   116,   119,   125,   131,   134,   137,   141,   145,   147,   151,
   155,   159,   163,   167,   171,   173,   177,   181,   183,   187,
   191,   193,   196,   199,   201,   203,   205,   207,   209,   211,
   213,   215,   217,   220,   223,   228,   232,   234,   235,   239,
   241
};

static const short yyrhs[] = {    37,
     0,    37,    38,     0,    38,     0,    42,    64,    29,    39,
    30,    40,     0,    64,    29,    39,    30,    25,    18,    42,
    31,    40,    32,     0,    39,    33,    41,     0,    41,     0,
     0,    43,     0,    45,     0,    46,     0,    47,     0,    48,
     0,    49,     0,    50,     0,    51,     0,    41,    34,     0,
    52,    34,     0,    42,    64,     0,    42,    64,    28,    53,
     0,    42,    26,     0,     8,     0,    31,    44,    32,     0,
    44,    40,     0,    40,     0,    12,    29,    52,    30,    40,
     0,    12,    29,    52,    30,    40,    17,    40,     0,    15,
    29,    52,    30,    40,     0,    13,    29,    41,    34,    52,
    34,    52,    30,    40,     0,    11,    31,    40,    32,    15,
    29,    52,    30,    34,     0,     9,    34,     0,     9,    29,
    63,    30,    34,     0,     9,    29,     7,    30,    34,     0,
    10,    34,     0,    14,    34,     0,    14,    52,    34,     0,
    52,    28,    53,     0,    53,     0,    53,    19,    54,     0,
    53,    18,    54,     0,    53,    20,    54,     0,    53,    21,
    54,     0,    53,    22,    54,     0,    53,    23,    54,     0,
    54,     0,    54,    24,    55,     0,    54,    25,    55,     0,
    55,     0,    55,    26,    56,     0,    55,    27,    56,     0,
    56,     0,    24,    57,     0,    25,    57,     0,    57,     0,
    64,     0,    60,     0,    63,     0,     6,     0,    62,     0,
    58,     0,    59,     0,     3,     0,    35,    64,     0,    26,
    57,     0,    64,    29,    61,    30,     0,    61,    33,    52,
     0,    52,     0,     0,    29,    52,    30,     0,     4,     0,
     5,     0
};

#endif

#if (YY_BisonParser_DEBUG != 0) || defined(YY_BisonParser_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
    81,    88,    91,    95,    98,   102,   105,   107,   111,   114,
   116,   118,   120,   122,   124,   126,   128,   130,   134,   137,
   141,   144,   148,   153,   156,   160,   163,   167,   172,   177,
   182,   185,   187,   191,   196,   199,   203,   206,   210,   217,
   223,   229,   235,   241,   247,   251,   258,   264,   268,   275,
   281,   285,   288,   290,   294,   297,   299,   301,   303,   305,
   307,   309,   313,   318,   323,   328,   331,   333,   337,   342,
   346
};

static const char * const yytname[] = {   "$","error","$illegal.","NULL_UNIT",
"NUMBER","IDENTIFIER","STRING","ALL","BASIC_TYPE","BREAK","CONTINUE","DO","IF",
"FOR","RETURN","WHILE","IFX","ELSE","'>'","'<'","EQ","NEQ","OR","AND","'+'",
"'-'","'*'","'/'","'='","'('","')'","'{'","'}'","','","';'","'&'","program",
"functions_list","function","paramaters_list","instruction","declaration","type",
"compound_instruction","instructions_list","if_instruction","while_instruction",
"for_instruction","do_while_instruction","break_instruction","continue_instruction",
"return_instruction","assignment_expression","expression","simple_expression",
"factor","unary_factor","unit","get_address","dereference","function_call","expressions_list",
"parenthesis","number","identifier",""
};
#endif

static const short yyr1[] = {     0,
    36,    37,    37,    38,    38,    39,    39,    39,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    41,    41,
    42,    42,    43,    44,    44,    45,    45,    46,    47,    48,
    49,    49,    49,    50,    51,    51,    52,    52,    53,    53,
    53,    53,    53,    53,    53,    54,    54,    54,    55,    55,
    55,    56,    56,    56,    57,    57,    57,    57,    57,    57,
    57,    57,    58,    59,    60,    61,    61,    61,    62,    63,
    64
};

static const short yyr2[] = {     0,
     1,     2,     1,     6,    10,     3,     1,     0,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     2,     4,
     2,     1,     3,     2,     1,     5,     7,     5,     9,     9,
     2,     5,     5,     2,     2,     3,     3,     1,     3,     3,
     3,     3,     3,     3,     1,     3,     3,     1,     3,     3,
     1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     2,     4,     3,     1,     0,     3,     1,
     1
};

static const short yydefact[] = {     0,
    71,    22,     1,     3,     0,     0,     2,    21,     0,     8,
     8,     0,     7,     0,     0,     0,     0,    19,     0,     0,
     6,     0,    62,    70,    58,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
     9,    10,    11,    12,    13,    14,    15,    16,     0,    38,
    45,    48,    51,    54,    60,    61,    56,    59,    57,    55,
     0,    20,     0,    31,    34,     0,     0,     0,    35,     0,
     0,    52,    53,    64,     0,    25,     0,    63,    17,     0,
    18,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    68,     0,     0,     0,     0,     0,     0,    36,     0,
    69,    23,    24,    37,    40,    39,    41,    42,    43,    44,
    46,    47,    49,    50,    67,     0,     0,     0,     0,     0,
     0,     0,     0,    65,     0,     0,    33,    32,     0,    26,
     0,    28,    66,     5,     0,     0,     0,     0,    27,     0,
     0,     0,    30,    29,     0,     0,     0
};

static const short yydefgoto[] = {   145,
     3,     4,    12,    39,    40,    14,    41,    77,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,   116,    58,    59,    60
};

static const short yypact[] = {    14,
-32768,-32768,    14,-32768,    -2,     4,-32768,-32768,    16,    55,
    55,     5,-32768,    -2,    11,    27,    55,    47,   105,    49,
-32768,   145,-32768,-32768,-32768,     3,    68,    81,    64,   106,
   118,   108,   152,   152,   152,   145,   105,    73,-32768,   104,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -18,     7,
    48,    99,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   110,
    55,     7,    39,-32768,-32768,   105,   145,    55,-32768,   -17,
   145,-32768,-32768,-32768,   -10,-32768,    45,-32768,-32768,   145,
-32768,   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,     8,   111,   115,   114,    51,   120,-32768,    59,
-32768,-32768,-32768,     7,    48,    48,    48,    48,    48,    48,
    99,    99,-32768,-32768,   131,    35,   105,   126,   127,   147,
   105,   145,   105,-32768,   145,   132,-32768,-32768,   134,   148,
   -13,-32768,   131,-32768,   145,   105,   145,    62,-32768,    75,
   133,   105,-32768,-32768,   166,   168,-32768
};

static const short yypgoto[] = {-32768,
-32768,   169,   162,   -35,    -4,     1,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -31,   -14,    13,    44,    37,
    50,-32768,-32768,-32768,-32768,-32768,   112,     9
};


#define	YYLAST		187


static const short yytable[] = {    70,
     5,    76,     1,     5,    75,    13,    13,    62,     6,    80,
    80,     6,    21,     9,    80,    81,    99,    80,     1,   101,
   137,     2,    18,     8,    82,    83,    84,    85,    86,    87,
    96,    63,    10,     8,    16,    97,    64,    17,   117,   100,
    19,   103,    24,    17,    11,    94,    78,    23,    24,     1,
    25,    20,     2,    26,    27,    28,    29,    30,    31,    32,
   115,    93,     2,    98,   124,   104,    61,   125,    33,    34,
    35,    88,    89,    36,    22,    37,   102,     1,    80,    38,
   121,   126,    72,    73,    74,   130,    80,   132,   123,    80,
   131,   141,    67,   133,   105,   106,   107,   108,   109,   110,
   139,    65,    80,   138,   142,   140,   144,    23,    24,     1,
    25,    66,     2,    26,    27,    28,    29,    30,    31,    32,
    23,    24,     1,    25,    90,    91,   113,   114,    33,    34,
    35,   111,   112,    36,    68,    37,    71,    79,    92,    38,
   118,    33,    34,    35,   119,   120,    36,    23,    24,     1,
    25,    69,    38,   122,    23,    24,     1,    25,    80,   127,
   128,   129,   135,   134,   136,   146,   143,   147,    33,    34,
    35,     7,    15,    36,    95,     0,     0,    35,     0,    38,
    36,     0,     0,     0,     0,     0,    38
};

static const short yycheck[] = {    31,
     0,    37,     5,     3,    36,    10,    11,    22,     0,    28,
    28,     3,    17,     5,    28,    34,    34,    28,     5,    30,
    34,     8,    14,    26,    18,    19,    20,    21,    22,    23,
    66,    29,    29,    26,    30,    67,    34,    33,    31,    71,
    30,    77,     4,    33,    29,     7,    38,     3,     4,     5,
     6,    25,     8,     9,    10,    11,    12,    13,    14,    15,
    92,    61,     8,    68,    30,    80,    18,    33,    24,    25,
    26,    24,    25,    29,    28,    31,    32,     5,    28,    35,
    30,   117,    33,    34,    35,   121,    28,   123,    30,    28,
   122,    30,    29,   125,    82,    83,    84,    85,    86,    87,
   136,    34,    28,   135,    30,   137,   142,     3,     4,     5,
     6,    31,     8,     9,    10,    11,    12,    13,    14,    15,
     3,     4,     5,     6,    26,    27,    90,    91,    24,    25,
    26,    88,    89,    29,    29,    31,    29,    34,    29,    35,
    30,    24,    25,    26,    30,    32,    29,     3,     4,     5,
     6,    34,    35,    34,     3,     4,     5,     6,    28,    34,
    34,    15,    29,    32,    17,     0,    34,     0,    24,    25,
    26,     3,    11,    29,    63,    -1,    -1,    26,    -1,    35,
    29,    -1,    -1,    -1,    -1,    -1,    35
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_BisonParser_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_BisonParser_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_BisonParser_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_BisonParser_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_BisonParser_CHAR = (token), YY_BisonParser_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_BisonParser_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_BisonParser_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_BisonParser_PURE
/* UNPURE */
#define YYLEX           YY_BisonParser_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_BisonParser_CHAR;                      /*  the lookahead symbol        */
YY_BisonParser_STYPE      YY_BisonParser_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_BisonParser_NERRS;                 /*  number of parse errors so far */
#ifdef YY_BisonParser_LSP_NEEDED
YY_BisonParser_LTYPE YY_BisonParser_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_BisonParser_LSP_NEEDED
#define YYLEX           YY_BisonParser_LEX(&YY_BisonParser_LVAL, &YY_BisonParser_LLOC)
#else
#define YYLEX           YY_BisonParser_LEX(&YY_BisonParser_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_BisonParser_DEBUG != 0
int YY_BisonParser_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_BisonParser_CLASS::
#endif
     YY_BisonParser_PARSE(YY_BisonParser_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_BisonParser_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_BisonParser_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_BisonParser_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_BisonParser_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_BisonParser_LSP_NEEDED
  YY_BisonParser_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_BisonParser_LTYPE *yyls = yylsa;
  YY_BisonParser_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_BisonParser_PURE
  int YY_BisonParser_CHAR;
  YY_BisonParser_STYPE YY_BisonParser_LVAL;
  int YY_BisonParser_NERRS;
#ifdef YY_BisonParser_LSP_NEEDED
  YY_BisonParser_LTYPE YY_BisonParser_LLOC;
#endif
#endif

  YY_BisonParser_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_BisonParser_DEBUG != 0
  if (YY_BisonParser_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_BisonParser_NERRS = 0;
  YY_BisonParser_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_BisonParser_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_BisonParser_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_BisonParser_LSP_NEEDED
      YY_BisonParser_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_BisonParser_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_BisonParser_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_BisonParser_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_BisonParser_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_BisonParser_LSP_NEEDED
      yyls = (YY_BisonParser_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_BisonParser_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_BisonParser_DEBUG != 0
      if (YY_BisonParser_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_BisonParser_DEBUG != 0
  if (YY_BisonParser_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_BisonParser_CHAR == YYEMPTY)
    {
#if YY_BisonParser_DEBUG != 0
      if (YY_BisonParser_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_BisonParser_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_BisonParser_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_BisonParser_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_BisonParser_DEBUG != 0
      if (YY_BisonParser_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_BisonParser_CHAR);

#if YY_BisonParser_DEBUG != 0
      if (YY_BisonParser_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_BisonParser_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_BisonParser_CHAR, YY_BisonParser_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_BisonParser_DEBUG != 0
  if (YY_BisonParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_BisonParser_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_BisonParser_CHAR != YYEOF)
    YY_BisonParser_CHAR = YYEMPTY;

  *++yyvsp = YY_BisonParser_LVAL;
#ifdef YY_BisonParser_LSP_NEEDED
  *++yylsp = YY_BisonParser_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_BisonParser_DEBUG != 0
  if (YY_BisonParser_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 1:
#line 83 "./bison_parser.y"
{ yyval. m_program  = makeSharedPtr( new Program( yyvsp[0]. m_functionsList  ) ); 
					m_program = yyval. m_program ;
				;
    break;}
case 2:
#line 90 "./bison_parser.y"
{ yyval. m_functionsList  = makeSharedPtr( new FunctionsList( yyvsp[-1]. m_functionsList , yyvsp[0]. m_function  ) ); ;
    break;}
case 3:
#line 92 "./bison_parser.y"
{ yyval. m_functionsList  = makeSharedPtr( new FunctionsList( yyvsp[0]. m_function  ) ); ;
    break;}
case 4:
#line 97 "./bison_parser.y"
{ yyval. m_function  = makeSharedPtr( new Function( yyvsp[-5]. m_type , yyvsp[-4]. m_string , yyvsp[-2]. m_parametersList , yyvsp[0]. m_instruction  ) ); ;
    break;}
case 5:
#line 99 "./bison_parser.y"
{ yyval. m_function  = makeSharedPtr( new Function( yyvsp[-3]. m_type , yyvsp[-9]. m_string , yyvsp[-7]. m_parametersList , yyvsp[-1]. m_instruction  ) ); ;
    break;}
case 6:
#line 104 "./bison_parser.y"
{ yyval. m_parametersList  = makeSharedPtr( new ParametersList( yyvsp[-2]. m_parametersList , makeSharedPtr( new Parameter( yyvsp[0]. m_declaration  ) ) ) ); ;
    break;}
case 7:
#line 106 "./bison_parser.y"
{ yyval. m_parametersList  = makeSharedPtr( new ParametersList( makeSharedPtr( new Parameter( yyvsp[0]. m_declaration  ) ) ) ); ;
    break;}
case 8:
#line 108 "./bison_parser.y"
{ yyval. m_parametersList  = makeSharedPtr( new ParametersList() ); ;
    break;}
case 9:
#line 113 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_compoundInstruction ; ;
    break;}
case 10:
#line 115 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_ifInstruction ; ;
    break;}
case 11:
#line 117 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_whileInstruction ; ;
    break;}
case 12:
#line 119 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_forInstruction ; ;
    break;}
case 13:
#line 121 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_doWhile ; ;
    break;}
case 14:
#line 123 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_breakInstruction ; ;
    break;}
case 15:
#line 125 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_continueInstruction ; ;
    break;}
case 16:
#line 127 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[0]. m_returnInstruction ; ;
    break;}
case 17:
#line 129 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[-1]. m_declaration ; ;
    break;}
case 18:
#line 131 "./bison_parser.y"
{ yyval. m_instruction  = yyvsp[-1]. m_assignmentExpression ; ;
    break;}
case 19:
#line 136 "./bison_parser.y"
{ yyval. m_declaration  = makeSharedPtr( new Declaration( yyvsp[-1]. m_type , yyvsp[0]. m_string  ) ); ;
    break;}
case 20:
#line 138 "./bison_parser.y"
{ yyval. m_declaration  = makeSharedPtr( new Declaration( yyvsp[-3]. m_type , yyvsp[-2]. m_string , yyvsp[0]. m_expression  ) ); ;
    break;}
case 21:
#line 143 "./bison_parser.y"
{ yyval. m_type  = PointerType::create( yyvsp[-1]. m_type  ); ;
    break;}
case 22:
#line 145 "./bison_parser.y"
{ yyval. m_type  = BuildInType::create( m_lexer.YYText() ); ;
    break;}
case 23:
#line 150 "./bison_parser.y"
{ yyval. m_compoundInstruction  = makeSharedPtr( new CompoundInstruction( yyvsp[-1]. m_instructionsList  ) ); ;
    break;}
case 24:
#line 155 "./bison_parser.y"
{ yyval. m_instructionsList  = makeSharedPtr( new InstructionsList( yyvsp[-1]. m_instructionsList , yyvsp[0]. m_instruction  ) ); ;
    break;}
case 25:
#line 157 "./bison_parser.y"
{ yyval. m_instructionsList  = makeSharedPtr( new InstructionsList( yyvsp[0]. m_instruction  ) ); ;
    break;}
case 26:
#line 162 "./bison_parser.y"
{ yyval. m_ifInstruction  = makeSharedPtr( new IfInstruction( yyvsp[-2]. m_assignmentExpression , yyvsp[0]. m_instruction  ) ); ;
    break;}
case 27:
#line 164 "./bison_parser.y"
{ yyval. m_ifInstruction  = makeSharedPtr( new IfInstruction( yyvsp[-4]. m_assignmentExpression , yyvsp[-2]. m_instruction , yyvsp[0]. m_instruction  ) ); ;
    break;}
case 28:
#line 169 "./bison_parser.y"
{ yyval. m_whileInstruction  = makeSharedPtr( new WhileInstruction( yyvsp[-2]. m_assignmentExpression , yyvsp[0]. m_instruction  ) ); ;
    break;}
case 29:
#line 174 "./bison_parser.y"
{ yyval. m_forInstruction  = makeSharedPtr( new ForInstruction( yyvsp[-6]. m_declaration , yyvsp[-4]. m_assignmentExpression , yyvsp[-2]. m_assignmentExpression , yyvsp[0]. m_instruction  ) ); ;
    break;}
case 30:
#line 179 "./bison_parser.y"
{ yyval. m_doWhile  = makeSharedPtr( new DoWhileInstruction( yyvsp[-6]. m_instruction , yyvsp[-2]. m_assignmentExpression  ) ); ;
    break;}
case 31:
#line 184 "./bison_parser.y"
{ yyval. m_breakInstruction  = BreakInstruction::create( 1 ); ;
    break;}
case 32:
#line 186 "./bison_parser.y"
{ yyval. m_breakInstruction  = BreakInstruction::create( yyvsp[-2]. m_number  ); ;
    break;}
case 33:
#line 188 "./bison_parser.y"
{ yyval. m_breakInstruction  = BreakInstruction::createBreakAll(); ;
    break;}
case 34:
#line 193 "./bison_parser.y"
{ yyval. m_continueInstruction  = ContinueInstruction::create(); ;
    break;}
case 35:
#line 198 "./bison_parser.y"
{ yyval. m_returnInstruction  = makeSharedPtr( new ReturnInstruction ); ;
    break;}
case 36:
#line 200 "./bison_parser.y"
{ yyval. m_returnInstruction  = makeSharedPtr( new ReturnInstruction( yyvsp[-1]. m_assignmentExpression  ) ); ;
    break;}
case 37:
#line 205 "./bison_parser.y"
{ yyval. m_assignmentExpression  = makeSharedPtr( new AssignmentExpression( yyvsp[-2]. m_assignmentExpression , yyvsp[0]. m_expression  ) ); ;
    break;}
case 38:
#line 207 "./bison_parser.y"
{ yyval. m_assignmentExpression  = makeSharedPtr( new AssignmentExpression ( yyvsp[0]. m_expression  ) ); ;
    break;}
case 39:
#line 212 "./bison_parser.y"
{ yyval. m_expression  = makeSharedPtr(
    				new Expression(
    					yyvsp[-2]. m_expression ,
    					makeSharedPtr( new LessOperator() ),
    					yyvsp[0]. m_simpleExpression ) ); ;
    break;}
case 40:
#line 218 "./bison_parser.y"
{ yyval. m_expression  = makeSharedPtr(
    				new Expression(
    					yyvsp[-2]. m_expression ,
    					makeSharedPtr( new GreaterOperator() ),
    					yyvsp[0]. m_simpleExpression ) ); ;
    break;}
case 41:
#line 224 "./bison_parser.y"
{ yyval. m_expression  = makeSharedPtr(
    				new Expression(
    					yyvsp[-2]. m_expression ,
    					makeSharedPtr( new EqualOperator() ),
    					yyvsp[0]. m_simpleExpression ) ); ;
    break;}
case 42:
#line 230 "./bison_parser.y"
{ yyval. m_expression  = makeSharedPtr(
    				new Expression(
    					yyvsp[-2]. m_expression ,
    					makeSharedPtr( new NotEqualOperator() ),
    					yyvsp[0]. m_simpleExpression ) ); ;
    break;}
case 43:
#line 236 "./bison_parser.y"
{ yyval. m_expression  = makeSharedPtr(
    				new Expression(
    					yyvsp[-2]. m_expression ,
    					makeSharedPtr( new OrOperator() ),
    					yyvsp[0]. m_simpleExpression ) ); ;
    break;}
case 44:
#line 242 "./bison_parser.y"
{ yyval. m_expression  = makeSharedPtr(
    				new Expression(
    					yyvsp[-2]. m_expression ,
    					makeSharedPtr( new AndOperator() ),
    					yyvsp[0]. m_simpleExpression ) ); ;
    break;}
case 45:
#line 248 "./bison_parser.y"
{ yyval. m_expression  = makeSharedPtr( new Expression( yyvsp[0]. m_simpleExpression  ) ); ;
    break;}
case 46:
#line 253 "./bison_parser.y"
{ yyval. m_simpleExpression  = makeSharedPtr(
  					new SimpleExpression(
  						yyvsp[-2]. m_simpleExpression ,
  						makeSharedPtr( new AdditionOperator() ),
  						yyvsp[0]. m_factor  ) ); ;
    break;}
case 47:
#line 259 "./bison_parser.y"
{ yyval. m_simpleExpression  = makeSharedPtr(
  					new SimpleExpression(
  						yyvsp[-2]. m_simpleExpression ,
  						makeSharedPtr( new SubtractionOperator() ),
  						yyvsp[0]. m_factor  ) ); ;
    break;}
case 48:
#line 265 "./bison_parser.y"
{ yyval. m_simpleExpression  = boost::shared_ptr< SimpleExpression >( new SimpleExpression( yyvsp[0]. m_factor  ) ); ;
    break;}
case 49:
#line 270 "./bison_parser.y"
{ yyval. m_factor  = makeSharedPtr(
					new Factor(
						yyvsp[-2]. m_factor ,
						makeSharedPtr( new MultiplicationOperator() ),
						yyvsp[0]. m_unaryFactor  ) ); ;
    break;}
case 50:
#line 276 "./bison_parser.y"
{ yyval. m_factor  = makeSharedPtr(
					new Factor(
						yyvsp[-2]. m_factor ,
						makeSharedPtr( new DivisionOperator() ),
						yyvsp[0]. m_unaryFactor  ) ); ;
    break;}
case 51:
#line 282 "./bison_parser.y"
{ yyval. m_factor  = makeSharedPtr( new Factor( yyvsp[0]. m_unaryFactor  ) ); ;
    break;}
case 52:
#line 287 "./bison_parser.y"
{ yyval. m_unaryFactor  = makeSharedPtr( new UnaryFactor( boost::shared_ptr< UnaryOperator >( ) ,yyvsp[0]. m_unit  ) ); ;
    break;}
case 53:
#line 289 "./bison_parser.y"
{ yyval. m_unaryFactor  = makeSharedPtr( new UnaryFactor( makeSharedPtr( new MinusOperator ) ,yyvsp[0]. m_unit  ) ); ;
    break;}
case 54:
#line 291 "./bison_parser.y"
{ yyval. m_unaryFactor  = makeSharedPtr( new UnaryFactor( yyvsp[0]. m_unit  ) ); ;
    break;}
case 55:
#line 296 "./bison_parser.y"
{ yyval. m_unit  = boost::shared_ptr< IUnit >( new Variable( yyvsp[0]. m_string  ) ); ;
    break;}
case 56:
#line 298 "./bison_parser.y"
{ yyval. m_unit  = yyvsp[0]. m_functionCall ; ;
    break;}
case 57:
#line 300 "./bison_parser.y"
{ yyval. m_unit  = boost::shared_ptr< IUnit >( new Number( yyvsp[0]. m_number  ) ); ;
    break;}
case 58:
#line 302 "./bison_parser.y"
{ yyval. m_unit  = boost::shared_ptr< IUnit >( new String( m_lexer.YYText() ) ); ;
    break;}
case 59:
#line 304 "./bison_parser.y"
{ yyval. m_unit  = yyvsp[0]. m_parenthesis ; ;
    break;}
case 60:
#line 306 "./bison_parser.y"
{ yyval. m_unit  = yyvsp[0]. m_getAddress ; ;
    break;}
case 61:
#line 308 "./bison_parser.y"
{ yyval. m_unit  = yyvsp[0]. m_dereference ; ;
    break;}
case 62:
#line 310 "./bison_parser.y"
{ yyval. m_unit  = Null::create(); ;
    break;}
case 63:
#line 315 "./bison_parser.y"
{ yyval. m_getAddress  = GetAddress::create( makeSharedPtr( new Variable( yyvsp[0]. m_string  ) ) ); ;
    break;}
case 64:
#line 320 "./bison_parser.y"
{ yyval. m_dereference  = Dereference::create( yyvsp[0]. m_unit  ); ;
    break;}
case 65:
#line 325 "./bison_parser.y"
{ yyval. m_functionCall  = makeSharedPtr( new FunctionCall( yyvsp[-3]. m_string , yyvsp[-1]. m_expressionsList  ) ); ;
    break;}
case 66:
#line 330 "./bison_parser.y"
{ yyval. m_expressionsList  = makeSharedPtr( new ExpressionsList( yyvsp[-2]. m_expressionsList , yyvsp[0]. m_assignmentExpression  ) ); ;
    break;}
case 67:
#line 332 "./bison_parser.y"
{ yyval. m_expressionsList  = makeSharedPtr( new ExpressionsList( yyvsp[0]. m_assignmentExpression  ) ); ;
    break;}
case 68:
#line 334 "./bison_parser.y"
{ yyval. m_expressionsList  = boost::shared_ptr< ExpressionsList >(); ;
    break;}
case 69:
#line 339 "./bison_parser.y"
{ yyval. m_parenthesis  = makeSharedPtr( new Parenthesis( yyvsp[-1]. m_assignmentExpression  ) ); ;
    break;}
case 70:
#line 344 "./bison_parser.y"
{ yyval. m_number  = boost::lexical_cast< int >( m_lexer.YYText() ); ;
    break;}
case 71:
#line 348 "./bison_parser.y"
{ yyval. m_string  = m_lexer.YYText(); ;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_BisonParser_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_BisonParser_DEBUG != 0
  if (YY_BisonParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_BisonParser_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_BisonParser_LLOC.first_line;
      yylsp->first_column = YY_BisonParser_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_BisonParser_NERRS;

#ifdef YY_BisonParser_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_BisonParser_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_BisonParser_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_BisonParser_ERROR_VERBOSE */
	YY_BisonParser_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_BisonParser_CHAR == YYEOF)
	YYABORT;

#if YY_BisonParser_DEBUG != 0
      if (YY_BisonParser_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_BisonParser_CHAR, yytname[yychar1]);
#endif

      YY_BisonParser_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_BisonParser_LSP_NEEDED
  yylsp--;
#endif

#if YY_BisonParser_DEBUG != 0
  if (YY_BisonParser_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_BisonParser_DEBUG != 0
  if (YY_BisonParser_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_BisonParser_LVAL;
#ifdef YY_BisonParser_LSP_NEEDED
  *++yylsp = YY_BisonParser_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 351 "./bison_parser.y"

